#include <gl/glew.h>
#include <gl/glfw3.h>
#include <gl/glut.h>
#include <cmath>

#include<glm/glm/glm.hpp>
#include<glm/glm/matrix.hpp>
#include <glm/glm/gtc/matrix_transform.hpp>
#include <glm/glm/gtc/type_ptr.hpp>

#include <iostream>

using namespace std;

// Function prototypes
void key_callback(GLFWwindow* window, int key, int scancode, int action, int mode);
// Window dimensions
const GLuint WIDTH = 800, HEIGHT = 600;

//定义顶点着色器
const char *VertexShaderSource = "#version 430 core\n"
	"layout(location=0) in vec3 aPos;\n"

	"uniform mat4 model;\n"

	"void main()\n"
	"{\n"
	"gl_Position= model * vec4(aPos.x,aPos.y,aPos.z,1.0);\n"
	"}\n\0";
//定义片元着色器
const char* fragmentShaderSource = "#version 330 core\n"
	"in vec3 ourColor;\n" //OpenGL Shader程序会直接将同名的变量联系到一起，这个ourColor就是vertex shader中的输出的ourColor
	"out vec4 color;\n"
	"void main()\n"
	"{\n"
	"color = vec4(ourColor, 1.0f);\n"
	"}\n\0";

struct Indices
{
	GLuint x0;
	GLuint x1;
	GLuint x2;
	GLuint x3;
	GLuint x4;
	GLuint x5;
};

void someOpenGLFunctionThatDrawsOurTriangle()
{}

int main()
{
	glfwInit();
	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR,3);
	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR,3);
	glfwWindowHint(GLFW_OPENGL_PROFILE,GLFW_OPENGL_CORE_PROFILE);
	glfwWindowHint(GLFW_RESIZABLE,GL_FALSE);

	GLFWwindow* window = glfwCreateWindow(WIDTH,HEIGHT,"Triangle",NULL,NULL);	
	glfwMakeContextCurrent(window);

	// Set the required callback functions
	glfwSetKeyCallback(window, key_callback);
	// Set this to true so GLEW knows to use a modern approach to retrieving function pointers and extensions
	glewExperimental = GL_TRUE;
	glewInit();

	// Define the viewport dimensions
	int width, height;
	glfwGetFramebufferSize(window, &width, &height);  

	glViewport(0, 0, width, height);

	GLuint vertexShader;
	vertexShader = glCreateShader(GL_VERTEX_SHADER);
	//附加着色器源码到着色器对象上
	glShaderSource(vertexShader,1,&VertexShaderSource,NULL);
	//编译着色器对象
	glCompileShader(vertexShader);

	//调试异常
	GLint sucess;
	GLchar infoLog[512];
	glGetShaderiv(vertexShader,GL_COMPILE_STATUS,&sucess);
	//glGetShaderiv(fragmentShader,GL_COMPILE_STATUS,&sucess);
	if(!sucess)
	{
		glGetShaderInfoLog(vertexShader,512,NULL,infoLog );
		std::cout << "ERROR::SHADER::VERTEX::COMPILATION_FAILED\n" << infoLog << std::endl;
	}

	GLuint fragmentShader;
	fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);
	glShaderSource(fragmentShader,1,&fragmentShaderSource,NULL);
	glCompileShader(fragmentShader);


	//着色器程序
	unsigned int shaderProgram;
	shaderProgram = glCreateProgram();
	glAttachShader(shaderProgram,vertexShader);
	glAttachShader(shaderProgram,fragmentShader);
	glLinkProgram(shaderProgram);
	glGetProgramiv(shaderProgram,GL_LINK_STATUS,&sucess);
	if(!sucess){
		glGetProgramInfoLog(shaderProgram,512,NULL,infoLog);
		std::cout << "ERROR::SHADER::PROGRAM::COMPILATION_FAILED\n" << infoLog << std::endl;
	}	
	//glUseProgram(shaderProgram);
	glDeleteShader(vertexShader);
	glDeleteShader(fragmentShader);

	//顶点缓存数据(vertex buffer object)
	GLfloat vertices[] = {
		-0.3f, -0.5f, 0.0f, //0:左下角
		0.5f, -0.5f, 0.0f,  //1:右下角
		0.0f,  0.5f, 0.0f,  //2:左上角
		0.8f,  0.5f, 0.0f   //3:右上角
	};
	//单元缓存数据(element buffer object)
	/*GLuint indices[] = {
		0,1,2,
		1,2,3
	};*/
	Indices* indices = new Indices[1];
	indices[0].x0 = 0;
	indices[0].x1 = 1;
	indices[0].x2 = 2;
	indices[0].x3 = 1;
	indices[0].x4 = 2;
	indices[0].x5 = 3;
	std::cout << "sizeof indices" <<  sizeof(indices) << endl;
	//统一交给顶点数组对象(vertex array object)管理
	GLuint VBO,VAO,EBO;
	//安排一个管家VBO，管理顶点缓存指针
	glGenBuffers(1,&VBO);
	glBindBuffer(GL_ARRAY_BUFFER,VBO);
	glGenVertexArrays(1,&VAO);
	glBindVertexArray(VAO);
	glGenBuffers(1,&EBO);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER,EBO);
	//把有用的数据存到 GL_ARRAY_BUFFER 中去，让管家管理
	glBufferData(GL_ARRAY_BUFFER,sizeof(vertices),vertices,GL_STATIC_DRAW);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER,6 * sizeof(GLuint),indices,GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(GLfloat), (GLvoid*)0);
	//解绑VAO（不是EBO）
	glEnableVertexAttribArray(0);
	// Game loop
	while (!glfwWindowShouldClose(window))
	{
		// Check if any events have been activiated (key pressed, mouse moved etc.) and call corresponding response functions
		glfwPollEvents();

		// Render
		// Clear the colorbuffer
		glClearColor(0.2f, 0.3f, 0.3f, 1.0f);
		glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);
	
		// Draw our first triangle
		glUseProgram(shaderProgram);

		glm::mat4 model;
		model = glm::rotate(model, (GLfloat)glfwGetTime() * 50.0f, glm::vec3(0.5f, 0.0f, 0.0f));
		GLint modelLoc = glGetUniformLocation(shaderProgram, "model");
		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(model));

		glBindVertexArray(VAO);
		glDrawElements(GL_TRIANGLES,6,GL_UNSIGNED_INT,0);
		//glDrawArrays(GL_TRIANGLES, 0, 3);
		glBindVertexArray(0);

		// Swap the screen buffers
		glfwSwapBuffers(window);
	}
	// Properly de-allocate all resources once they've outlived their purpose
	glDeleteVertexArrays(1, &VAO);
	glDeleteBuffers(1, &VBO);
	// Terminate GLFW, clearing any resources allocated by GLFW.
	glfwTerminate();
	return 0;
}

// Is called whenever a key is pressed/released via GLFW
void key_callback(GLFWwindow* window, int key, int scancode, int action, int mode)
{
	if (key == GLFW_KEY_ESCAPE && action == GLFW_PRESS)
		glfwSetWindowShouldClose(window, GL_TRUE);
}
/*
GLuint VBO, VAO;

glGenVertexArrays(1, &VAO);
glGenBuffers(1, &VBO);
//glGenBuffers(1,&EBO);
// Bind the Vertex Array Object first, then bind and set vertex buffer(s) and attribute pointer(s).
glBindVertexArray(VAO);

glBindBuffer(GL_ARRAY_BUFFER, VBO);
//glBindBuffer(GL_ARRAY_BUFFER, EBO);

glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);
//glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);
glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(GLfloat), (GLvoid*)0);
glEnableVertexAttribArray(0);

glBindBuffer(GL_ARRAY_BUFFER, 0); // Note that this is allowed, the call to glVertexAttribPointer registered VBO as the currently bound vertex buffer object so afterwards we can safely unbind

glBindVertexArray(0); // Unbind VAO (it's always a good thing to unbind any buffer/array to prevent strange bugs)

// Game loop
while (!glfwWindowShouldClose(window))
{
// Check if any events have been activiated (key pressed, mouse moved etc.) and call corresponding response functions
glfwPollEvents();

// Render
// Clear the colorbuffer
glClearColor(0.2f, 0.3f, 0.3f, 1.0f);
glClear(GL_COLOR_BUFFER_BIT);

// Draw our first triangle
glUseProgram(shaderProgram);

glBindVertexArray(VAO);
//glDrawElements(GL_TRIANGLES,6,GL_UNSIGNED_INT,0);
glDrawArrays(GL_TRIANGLES, 0, 3);
glBindVertexArray(0);

// Swap the screen buffers
glfwSwapBuffers(window);
}
// Properly de-allocate all resources once they've outlived their purpose
glDeleteVertexArrays(1, &VAO);
glDeleteBuffers(1, &VBO);
// Terminate GLFW, clearing any resources allocated by GLFW.
glfwTerminate();
*/
